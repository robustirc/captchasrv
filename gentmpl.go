// +build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

var output = flag.String("output", "templates.go", "Where to put the variable declarations")
var pkgname = flag.String("package", "main", "What package should the output file belong to")

// errWriter wraps an io.Writer and saves the first error it encounters (and
// otherwise ignores all write-errors).
type errWriter struct {
	io.Writer
	err error
}

func main() {
	flag.Parse()

	if flag.NArg() < 1 {
		log.Fatal("Must provide at least one template file to include")
	}

	buf := new(bytes.Buffer)

	fmt.Fprintf(buf, "package %s\n\n", *pkgname)
	fmt.Fprintf(buf, "// Generated by \"go run gentmpl.go %s\".\n", strings.Join(os.Args[1:], " "))
	fmt.Fprintf(buf, "// Do not edit manually.\n\n")
	fmt.Fprintf(buf, "import (\n")
	fmt.Fprintf(buf, "\t\"html/template\"\n")
	fmt.Fprintf(buf, ")\n")

	for i := 0; i < flag.NArg(); i++ {
		n := flag.Arg(i)
		b, err := ioutil.ReadFile(n + ".html")
		if err != nil {
			log.Fatal(err)
		}

		fmt.Fprintf(buf, "var %sTpl = template.Must(template.New(\"%s\").Parse(`%s`))\n\n", n, n, string(b))
	}

	outsrc, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Could not format output: %v", err)
	}

	if err = ioutil.WriteFile(*output, outsrc, 0644); err != nil {
		log.Fatalf("Could not write output: %v", err)
	}
}
